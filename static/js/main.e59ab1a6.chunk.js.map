{"version":3,"sources":["teamNames.js","utils.js","GameInfoView.js","shared.js","AutocompleteWidget.js","App.js","serviceWorker.js","index.js"],"names":["TEAMNAMES_OBJ","Arizona Diamondbacks","Atlanta Braves","Baltimore Orioles","Boston Red Sox","Chicago Cubs","Chicago White Sox","Cincinnati Reds","Cleveland Indians","Colorado Rockies","Detroit Tigers","Houston Astros","Kansas City Royals","Los Angeles Angels","Los Angeles Dodgers","Miami Marlins","Milwaukee Brewers","Minnesota Twins","New York Mets","New York Yankees","Oakland Athletics","Philadelphia Phillies","Pittsburgh Pirates","San Diego Padres","San Francisco Giants","Seattle Mariners","St. Louis Cardinals","Tampa Bay Rays","Texas Rangers","Toronto Blue Jays","Washington Nationals","utils","parseGameData","gameData","mainTeam","Object","entries","length","constructor","teamInfo","subject","split","isHomeGame","toLowerCase","location","awayTeam","homeTeam","startDate","startTime","formattedTodayDate","today","Date","dd","getDate","mm","getMonth","getFullYear","toString","substr","GameInfoView","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentTeam","constants","data","nextProps","teamName","setState","currentDate","gameInfo","currentFormattedDate","isGame","rawTeamData","homeOrAwayTitle","teamsTitle","concat","react_default","a","createElement","className","React","Component","allItems","map","s","name","id","css","emoCSS","apply","arguments","Item","styled","position","cursor","display","border","height","textAlign","borderTop","lineHeight","color","fontSize","textTransform","fontWeight","boxShadow","padding","whiteSpace","wordWrap","_ref","isActive","isSelected","styles","push","background","Input","defineProperty","width","outline","minHeight","borderRadius","transition","borderColor","_ref2","isOpen","borderBottomLeftRadius","borderBottomRightRadius","Label","marginBottom","BaseMenu","marginTop","backgroundColor","maxHeight","overflowY","overflowX","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderStyle","_ref4","Menu","forwardRef","ref","assign","ControllerButton","right","top","flexDirection","justifyContent","alignItems","ArrowIcon","_ref5","viewBox","preserveAspectRatio","fill","stroke","strokeWidth","transform","undefined","d","XIcon","getItems","filter","matchSorter","keys","itemToString","i","AutocompleteWidget","teamChangedCallback","func","menuIsOpen","e","downshift_esm","onChange","initialInputValue","onOuterClick","asdf","getInputProps","getItemProps","getLabelProps","getMenuProps","inputValue","highlightedIndex","selectedItem","getToggleButtonProps","initialSelectedItem","clearSelection","margin","placeholder","onClick","aria-label","item","index","key","App","teamChanged","bind","assertThisInitialized","dataFromChild","src_AutocompleteWidget","src_GameInfoView_0","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e59ab1a6.chunk.js","sourcesContent":["export const MLB_TEAMS = [\"Arizona Diamondbacks\", \"Atlanta Braves\", \"Baltimore Orioles\", \"Boston Red Sox\", \"Chicago Cubs\", \"Chicago White Sox\", \"Cincinnati Reds\", \"Cleveland Indians\", \"Colorado Rockies\", \"Detroit Tigers\", \"Houston Astros\", \"Kansas City Royals\", \"Los Angeles Angels\", \"Los Angeles Dodgers\", \"Miami Marlins\", \"Milwaukee Brewers\", \"Minnesota Twins\", \"New York Mets\", \"New York Yankees\", \"Oakland Athletics\", \"Philadelphia Phillies\", \"Pittsburgh Pirates\", \"San Diego Padres\", \"San Francisco Giants\", \"Seattle Mariners\", \"St. Louis Cardinals\", \"Tampa Bay Rays\", \"Texas Rangers\", \"Toronto Blue Jays\", \"Washington Nationals\"];\n\nexport const MLB_TEAMS_LOWERCASE = [\"diamondbacks\", \"braves\", \"orioles\", \"red sox\", \"cubs\", \"white sox\", \"reds\", \"indians\", \"rockies\", \"tigers\", \"astros\", \"royals\", \"angels\", \"dodgers\", \"marlins\", \"brewers\", \"twins\", \"mets\", \"yankees\", \"athletics\", \"phillies\", \"pirates\", \"padres\", \"giants\", \"mariners\", \"cardinals\", \"rays\", \"rangers\", \"jays\", \"nationals\"];\n\nexport const TEAMNAMES_OBJ = {\n  \"Arizona Diamondbacks\": \"diamondbacks\",\n  \"Atlanta Braves\": \"braves\",\n  \"Baltimore Orioles\": \"orioles\",\n  \"Boston Red Sox\": \"red sox\",\n  \"Chicago Cubs\": \"cubs\",\n  \"Chicago White Sox\": \"white sox\",\n  \"Cincinnati Reds\": \"reds\",\n  \"Cleveland Indians\": \"indians\",\n  \"Colorado Rockies\": \"rockies\",\n  \"Detroit Tigers\": \"tigers\",\n  \"Houston Astros\": \"astros\",\n  \"Kansas City Royals\": \"royals\",\n  \"Los Angeles Angels\": \"angels\",\n  \"Los Angeles Dodgers\": \"dodgers\",\n  \"Miami Marlins\": \"marlins\",\n  \"Milwaukee Brewers\": \"brewers\",\n  \"Minnesota Twins\": \"twins\",\n  \"New York Mets\": \"mets\",\n  \"New York Yankees\": \"yankees\",\n  \"Oakland Athletics\": \"athletics\",\n  \"Philadelphia Phillies\": \"phillies\",\n  \"Pittsburgh Pirates\": \"pirates\",\n  \"San Diego Padres\": \"padres\",\n  \"San Francisco Giants\": \"giants\",\n  \"Seattle Mariners\": \"mariners\",\n  \"St. Louis Cardinals\": \"cardinals\",\n  \"Tampa Bay Rays\": \"rays\",\n  \"Texas Rangers\": \"rangers\",\n  \"Toronto Blue Jays\": \"jays\",\n  \"Washington Nationals\": \"nationals\"\n};\n","const utils = {\n  // takes in gameData in json and formats it to key:values we care about\n  parseGameData: (gameData, mainTeam) => {\n    if (Object.entries(gameData).length === 0 && gameData.constructor === Object) {\n      return;\n    }\n    const teamInfo = gameData.subject.split(' at ');\n    const isHomeGame = gameData.subject.split(' ')[1].toLowerCase() === mainTeam;\n    const location = gameData.location.split(' - ')[0];\n    return {\n      awayTeam: teamInfo[0],\n      homeTeam: teamInfo[1],\n      location,\n      startDate: gameData.startDate,\n      startTime: gameData.startTime,\n      isHomeGame: isHomeGame,\n    };\n  },\n\n  // Returns formatted today's date\n  formattedTodayDate: () => {\n    const today = new Date();\n    let dd = today.getDate();\n    let mm = today.getMonth() + 1; //January is 0!\n\n    const yyyy = today.getFullYear().toString().substr(-2);\n    if (dd < 10) {\n      dd = '0' + dd;\n    }\n    if (mm < 10) {\n      mm = '0' + mm;\n    }\n    return mm + '/' + dd + '/' + yyyy;\n  }\n};\n\nexport default utils;\n","import React from 'react';\nimport './GameInfoView.css';\nimport * as constants from './teamNames.js';\nimport data from './gameData.json';\nimport utils from './utils.js';\n\nclass GameInfoView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTeam: constants.TEAMNAMES_OBJ[props.currentTeam]\n    };\n    this.data = data;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const teamName = constants.TEAMNAMES_OBJ[nextProps.currentTeam];\n    this.setState({ currentTeam: teamName});\n  }\n\n  findNextGameData(currentDate) {\n  // starting day + 1, if in rawTeamData, return.\n  }\n\n  render() {\n    // const currentFormattedDate = '06/30/19'; // home game\n    // const currentFormattedDate = '03/11/19'; // away game\n    // const currentFormattedDate = '06/50/19'; // no game\n\n    const currentFormattedDate = utils.formattedTodayDate();\n\n    let isGame = false;\n    let gameData = {};\n    let gameInfo;\n    const rawTeamData = this.data[this.state.currentTeam];\n    if (rawTeamData && currentFormattedDate in rawTeamData) {\n      gameData = rawTeamData[currentFormattedDate];\n      isGame = true;\n      gameInfo = utils.parseGameData(gameData, this.state.currentTeam);\n    }\n\n    if (isGame) {\n      const homeOrAwayTitle = gameInfo.isHomeGame ? 'home' : 'away';\n      let teamsTitle = '';\n      if (gameInfo.isHomeGame) {\n        teamsTitle = `${gameInfo.homeTeam} vs ${gameInfo.awayTeam}`;\n      } else {\n        teamsTitle = `${gameInfo.awayTeam} @ ${gameInfo.homeTeam}`;\n      }\n      return (\n        <div>\n        <hr />\n        <div className=\"yes\">YES</div>\n        <div className=\"homeaway\">{homeOrAwayTitle}</div>\n        <hr />\n        <div className=\"info\">{teamsTitle}</div>\n        <div className=\"info\">{gameInfo.startDate} {gameInfo.startTime}</div>\n        <div className=\"info\">{gameInfo.location}</div>\n        </div>\n      );\n    } else if (!isGame && this.state.currentTeam) {\n      return (\n        <div>\n        <hr />\n        <div className=\"no\">NO</div>\n        <hr />\n        </div>\n      );\n    } else {\n      return (\n        <div>\n        <hr />\n        </div>\n      );\n    }\n  }\n};\n\nexport default GameInfoView;\n","import React from 'react';\nimport {css as emoCSS} from 'emotion';\nimport styled from '@emotion/styled';\nimport * as constants from './teamNames.js';\nimport matchSorter from 'match-sorter';\n\nconst allItems = constants.MLB_TEAMS.map(s => ({name: s, id: s.toLowerCase()}))\n\nconst css = (...args) => ({className: emoCSS(...args)})\n\nconst Item = styled('li')(\n  {\n    position: 'relative',\n    cursor: 'pointer',\n    display: 'block',\n    border: 'none',\n    height: 'auto',\n    textAlign: 'left',\n    borderTop: 'none',\n    lineHeight: '1em',\n    color: 'rgba(0,0,0,.87)',\n    fontSize: '1rem',\n    textTransform: 'none',\n    fontWeight: '400',\n    boxShadow: 'none',\n    padding: '.8rem 1.1rem',\n    whiteSpace: 'normal',\n    wordWrap: 'normal',\n  },\n  ({isActive, isSelected}) => {\n    const styles = []\n    if (isActive) {\n      styles.push({\n        color: 'rgba(0,0,0,.95)',\n        background: 'rgba(0,0,0,.03)',\n      })\n    }\n    if (isSelected) {\n      styles.push({\n        color: 'rgba(0,0,0,.95)',\n        fontWeight: '700',\n      })\n    }\n    return styles\n  },\n)\nconst onAttention = '&:hover, &:focus'\nconst Input = styled('input')(\n  {\n    width: 'calc(300px + 2vmin)',\n    // width: '100%', // full width - icon width/2 - border\n    fontSize: 14,\n    wordWrap: 'break-word',\n    lineHeight: '1em',\n    outline: 0,\n    whiteSpace: 'normal',\n    minHeight: '2em',\n    background: '#fff',\n    display: 'inline-block',\n    padding: '1em 2em 1em 1em',\n    color: 'rgba(0,0,0,.87)',\n    boxShadow: 'none',\n    border: '1px solid rgba(34,36,38,.15)',\n    borderRadius: '.30rem',\n    transition: 'box-shadow .1s ease,width .1s ease',\n    [onAttention]: {\n      borderColor: '#96c8da',\n      boxShadow: '0 2px 3px 0 rgba(34,36,38,.15)',\n    },\n  },\n  ({isOpen}) =>\n  isOpen\n  ? {\n    borderBottomLeftRadius: '0',\n    borderBottomRightRadius: '0',\n    [onAttention]: {\n      boxShadow: 'none',\n    },\n  }\n  : null,\n)\n\nconst Label = styled('label')({\n  fontWeight: 'bold',\n  display: 'block',\n  marginBottom: 10,\n})\n\nconst BaseMenu = styled('ul')(\n  {\n    padding: 0,\n    marginTop: 0,\n    position: 'absolute',\n    backgroundColor: 'white',\n    // width: '100%',\n    width: 'calc(342px + 2vmin)',\n    maxHeight: '20rem',\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    outline: '0',\n    transition: 'opacity .1s ease',\n    borderRadius: '0 0 .28571429rem .28571429rem',\n    boxShadow: '0 2px 3px 0 rgba(34,36,38,.15)',\n    borderColor: '#96c8da',\n    borderTopWidth: '0',\n    borderRightWidth: 1,\n    borderBottomWidth: 1,\n    borderLeftWidth: 1,\n    borderStyle: 'solid',\n  },\n  ({isOpen}) => ({\n    border: isOpen ? null : 'none',\n  }),\n)\n\nconst Menu = React.forwardRef((props, ref) => (\n  <BaseMenu ref={ref} {...props} />\n))\n\nconst ControllerButton = styled('button')({\n  backgroundColor: 'transparent',\n  border: 'none',\n  position: 'absolute',\n  right: 0,\n  top: 0,\n  cursor: 'pointer',\n  width: 47,\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  justifyContent: 'center',\n  alignItems: 'center',\n})\n\nfunction ArrowIcon({isOpen}) {\n  return (\n    <svg\n    viewBox=\"0 0 20 20\"\n    preserveAspectRatio=\"none\"\n    width={16}\n    fill=\"transparent\"\n    stroke=\"#979797\"\n    strokeWidth=\"1.1px\"\n    transform={isOpen ? 'rotate(180)' : undefined}\n    >\n    <path d=\"M1,6 L10,15 L19,6\" />\n    </svg>\n  )\n}\n\nfunction XIcon() {\n  return (\n    <svg\n    viewBox=\"0 0 20 20\"\n    preserveAspectRatio=\"none\"\n    width={12}\n    fill=\"transparent\"\n    stroke=\"#979797\"\n    strokeWidth=\"1.1px\"\n    >\n    <path d=\"M1,1 L19,19\" />\n    <path d=\"M19,1 L1,19\" />\n    </svg>\n  )\n}\n\nfunction getItems(filter) {\n  return filter\n    ? matchSorter(allItems, filter, {\n      keys: ['name'],\n    })\n    : allItems\n}\n\nfunction getStringItems(filter) {\n  return getItems(filter).map(({name}) => name)\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms)\n  })\n}\n\n\nasync function getItemsAsync(filter, {reject}) {\n    await sleep(Math.random() * 2000)\n    if (reject) {\n      throw new Error({error: 'request rejected'})\n        }\n    return getItems(filter)\n}\n\nconst itemToString = i => (i ? i.name : '')\n\nexport {\n    Menu,\n    ControllerButton,\n    Input,\n    Item,\n    ArrowIcon,\n    XIcon,\n    Label,\n    css,\n    itemToString,\n    getItems,\n    getStringItems,\n    getItemsAsync,\n};\n","import React from 'react';\nimport Downshift from 'downshift';\n\nimport {\n  Label,\n  Menu,\n  ControllerButton,\n  Input,\n  Item,\n  ArrowIcon,\n  XIcon,\n  css,\n  itemToString,\n  getItems,\n} from './shared'\n\n\nclass AutocompleteWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.teamChangedCallback = props.func;\n    this.currentTeam = props.currentTeam;\n    this.state = {\n      menuIsOpen: false\n    };\n  }\n\n  asdf(e) {\n    // onOuterClick={() => this.setState({menuIsOpen: false})}\n    debugger\n  }\n  render() {\n    return (\n      <div\n      {...css({\n        display: 'flex',\n        flexDirection: 'column',\n        marginTop: 50,\n      })}\n      >\n      <Downshift\n        onChange={this.teamChangedCallback}\n        itemToString={itemToString}\n        initialInputValue={this.currentTeam}\n        onOuterClick={this.asdf}\n      >\n      {({\n        getInputProps,\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        inputValue,\n        highlightedIndex,\n        selectedItem,\n        initialSelectedItem,\n        getToggleButtonProps,\n        clearSelection,\n      }) => (\n        <div {...css({margin: 'auto'})}>\n          <Label {...getLabelProps()}> Game today?</Label>\n          <div {...css({position: 'relative'})}>\n          <Input {...getInputProps({\n            isOpen,\n            placeholder: 'Enter a team',\n          })} />\n        {selectedItem ? (\n          <ControllerButton\n          onClick={clearSelection}\n          aria-label=\"clear selection\"\n          >\n          <XIcon />\n          </ControllerButton>\n        ) : (\n          <ControllerButton {...getToggleButtonProps()}>\n            <ArrowIcon isOpen={isOpen} />\n          </ControllerButton>\n        )}\n\n        <div {...css({position: 'relative'})}>\n        <Menu {...getMenuProps({isOpen})}>\n        {isOpen\n          ? getItems(inputValue).map((item, index) => (\n            <Item\n            key={item.id}\n            {...getItemProps({\n              item,\n              index,\n              isActive: highlightedIndex === index,\n              isSelected: selectedItem === item,\n            })}\n            >\n            {itemToString(item)}\n            </Item>\n          ))\n          : null}\n        </Menu>\n        </div>\n        </div>\n        </div>\n      )}\n      </Downshift>\n      </div>\n    );\n  };\n};\n\nexport default AutocompleteWidget;\n","import React from 'react';\nimport './App.css';\nimport GameInfoView from './GameInfoView.js';\nimport AutocompleteWidget from './AutocompleteWidget.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.teamChanged = this.teamChanged.bind(this)\n    this.state = {\n      mainTeam: \"San Francisco Giants\"\n    };\n  }\n\n  teamChanged(dataFromChild) {\n    const teamName = dataFromChild ? dataFromChild.name : \"\";\n    this.setState({\n      mainTeam: teamName\n    });\n  };\n\n  render() {\n    return (\n      <div>\n      <div className=\"App\">\n      <AutocompleteWidget func={this.teamChanged} currentTeam={this.state.mainTeam} />\n      <GameInfoView currentTeam={this.state.mainTeam}/>\n      </div>\n      <footer className=\"footer\">made by caro5</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}